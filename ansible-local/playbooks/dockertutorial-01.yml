- hosts: localhost
  user: ubuntu
  sudo: yes
  vars:
    private_registry_mountpoint: /dockerimages
    docker_priv_registry_path: /registry
    dockertutorial01_shipyard_ip: "192.168.123.140"
    dockertutorial01_shipyard_url: "http://{{dockertutorial01_shipyard_ip}}:8080"
    shipyard_api_key: "IvIveFbGtVqrWCjQls8cy3pyLaZ73MWVEWSe"
    docker_privreg_uri: "{{dockertutorial01_shipyard_ip}}:5000"
    enginename: "dockertutorial-01"
    docker0_ip_addr: "{{ansible_docker0['ipv4']['address']}}"
    dockertutorial01_ip: "{{dockertutorial01_shipyard_ip}}"
  tasks:
    - name: Allow docker to run also on tcp
      lineinfile: dest=/etc/default/docker regexp='^DOCKER_OPTS="-H tcp://0\.0\.0\.0:4243 -H unix:///var/run/docker\.sock' line='DOCKER_OPTS="-H tcp://0.0.0.0:4243 -H unix:///var/run/docker.sock --insecure-registry {{docker_privreg_uri}}"' backup=yes
      register: changeddockerconffile

    - name: Restart docker if tcp options have changed
      service: name=docker state=restarted
      when: changeddockerconffile|changed

    - command: "ps -ef"
      register: ps_output

    - command: "docker ps"
      register: dockerps_output
      when: "'/usr/bin/docker -d' in ps_output.stdout"

    - name: "Start RethinkDB data volume"
      command: "docker run -it -d --name shipyard-rethinkdb-data --entrypoint /bin/bash shipyard/rethinkdb -l"
      when: "'/usr/bin/docker -d' in ps_output.stdout  and not ('shipyard-rethinkdb-data' in dockerps_output.stdout)"
      register: rethinkdb_datavolume

    - command: "docker ps"
      register: dockerps_output
      when: "'/usr/bin/docker -d' in ps_output.stdout"

    - shell: "docker ps | awk '{print $NF}'"
      register: dockerpsnames_output
      when: "'/usr/bin/docker -d' in ps_output.stdout"
      
    - name: "Start RethinkDB container"
      command: "docker run -p=32770:8080 -p=32769:28015 -p=32768:29015 -it -d --name shipyard-rethinkdb --volumes-from shipyard-rethinkdb-data shipyard/rethinkdb"
      # Start only if shipyard-rethinkdb not present and shipyard-rethinkdb-data present in last column of docker ps
      when: "'/usr/bin/docker -d' in ps_output.stdout  and ('shipyard-rethinkdb-data' in dockerpsnames_output.stdout) and not (dockerpsnames_output.stdout | search('shipyard-rethinkdb[\n|$]') )"
      register: rethinkdb_container

    - command: "docker ps"
      register: dockerps_output
      when: "'/usr/bin/docker -d' in ps_output.stdout"

    - shell: "docker ps | awk '{print $NF}'"
      register: dockerpsnames_output
      when: "'/usr/bin/docker -d' in ps_output.stdout"

    - name: Wait until rethinkdb is up and running. That includes two containers.
      shell: 'docker ps -f name="rethinkdb" -f status=running -q | wc -l'
      register: dockerpsshipyard
      until: dockerpsshipyard.stdout.find("2") != -1
      retries: 20
      delay: 5

    - name: Wait until rethinkdb is listening
      wait_for: host=0.0.0.0 port=32769 state=started

    - name: Wait until rethinkdb is listening
      wait_for: host=172.17.0.2 port=28015 state=started

    - name: "Start Shipyard controller"
      command: "docker run -i -t -p 8080:8080 -d --name shipyard --link shipyard-rethinkdb:rethinkdb shipyard/shipyard -disable-usage-info"
      when: "'/usr/bin/docker -d' in ps_output.stdout and ('shipyard-rethinkdb-data' in dockerpsnames_output.stdout) and (dockerpsnames_output.stdout | search('shipyard-rethinkdb[\n|$]')) and not (dockerpsnames_output.stdout | search('shipyard[\n|$]'))"

    # Install private registry

    - name: Ensure docker dirs are present
      file: dest={{item}} state=directory
      with_items:
        - "{{private_registry_mountpoint}}"
        - "{{docker_priv_registry_path}}"
        
    - command: "ps -ef"
      register: ps_output

    - name: Retrieve docker ps list
      shell: "docker ps | awk '{print $NF}'"
      register: dockerpsnames_output
      when: "'/usr/bin/docker -d' in ps_output.stdout"

    - name: Copy script that inserts new API key to shipyard
      template: src=templates/createapikey.j2 dest=/home/vagrant/createapikey.py owner=vagrant group-vagrant mode=0700

    - name: Wait until shipyard container is up before attempting to create an api key in its database
      shell: 'docker ps -f name="shipyard$" -f status=running -q | wc -l'
      register: dockerpsshipyard
      until: dockerpsshipyard.stdout.find("1") != -1
      retries: 20
      delay: 5

    - name: Execute script
      shell: /home/vagrant/createapikey.py chdir="/home/vagrant" executable="/bin/bash"
      register: createnewapikey
      ignore_errors: true

    - name: Wait until shipyard api available
      shell: 'curl -i "{{dockertutorial01_shipyard_url}}/api/engines" -H "X-Service-Key: {{shipyard_api_key}}"'
      register: shipyardapicallresult
      until: shipyardapicallresult.stdout.find("200 OK") != -1
      retries: 20
      delay: 5

    - name: Check if this instance is registered as engine in shipyard
      uri: >
        url={{dockertutorial01_shipyard_url}}/api/engines
        method=GET
        HEADER_Content-Type="application/json"
        HEADER_X-Service-Key={{shipyard_api_key}}
        HEADER_Accept="application/json"
        status_code=200
        return_content=yes
      register: current_engine_list

    - name: Add vm to shipyard engine list if missing
      uri: >
        url={{dockertutorial01_shipyard_url}}/api/engines
        method=POST
        HEADER_Content-Type="application/json"
        HEADER_X-Service-Key={{shipyard_api_key}}
        HEADER_Accept="application/json"
        status_code=201
        return_content=yes
        body='{ "ca_cert": "", "engine": { "addr": "http://{{dockertutorial01_shipyard_ip}}:4243", "cpus": {{"%.1f"|format(ansible_processor_vcpus|float)}}, "id": "{{enginename}}", "labels": [ "{{enginename}}" ], "memory": {{ansible_memfree_mb}} }, "id": "local", "ssl_cert": "", "ssl_key": "" }'

      register: added_dockerprivreg_to_shipyard
      when: "not current_engine_list.content | search('{{enginename}}')"

    # - debug: msg="{{added_dockerprivreg_to_shipyard}}"

    - name: Retrieve list of containers
      uri: >
        url={{dockertutorial01_shipyard_url}}/api/containers
        method=GET
        HEADER_Content-Type="application/json"
        HEADER_X-Service-Key={{shipyard_api_key}}
        HEADER_Accept="application/json"
        status_code=200
        return_content=yes
      register: current_container_list

    - name: Run registry if missing
      uri: >
        url={{dockertutorial01_shipyard_url}}/api/containers
        method=POST
        HEADER_Content-Type="application/json"
        HEADER_X-Service-Key={{shipyard_api_key}}
        HEADER_Accept="application/json"
        status_code=201,409,500
        return_content=yes
        body='{ "name": "registry:2", "cpus": 0.3, "memory": 0.0, "type": "service", "hostname": "", "domain": "", "labels": [ "{{enginename}}" ], "container_name": "dockerprivateregistry", "volumes": ["{{private_registry_mountpoint}}:{{docker_priv_registry_path}}"], "bind_ports": [{"container_port": 5000, "port": 5000, "proto": "tcp"}], "environment": { "STORAGE_PATH": "{{docker_priv_registry_path}}" }, "restart_policy": { "name": "always" } }'
      when: "not current_container_list.content | search('dockerprivateregistry')"

    - name: Wait till registry is listening
      wait_for: host=0.0.0.0 port=5000 state=started

    - name: Start consul node1
      uri: >
        url={{dockertutorial01_shipyard_url}}/api/containers
        method=POST
        HEADER_Content-Type="application/json"
        HEADER_X-Service-Key={{shipyard_api_key}}
        HEADER_Accept="application/json"
        status_code=201,409,500
        return_content=yes
        body='{ "name": "progrium/consul", "cpus": 0.2, "memory": 0.0, "type": "service", "hostname": "consulserver-01", "domain": "", "container_name": "consulserver-01", "bind_ports": [{"host_ip" : "{{dockertutorial01_ip}}", "container_port": 8301, "port": 8301, "proto": "udp"},{"host_ip" : "{{dockertutorial01_ip}}", "container_port": 8302, "port": 8302, "proto": "udp"}, {"host_ip" : "{{dockertutorial01_ip}}", "container_port": 8300, "port": 8300, "proto": "tcp"}, {"host_ip" : "{{dockertutorial01_ip}}", "container_port": 8301, "port": 8301, "proto": "tcp"},{"host_ip" : "{{dockertutorial01_ip}}", "container_port": 8302, "port": 8302, "proto": "tcp"}, {"host_ip" : "{{dockertutorial01_ip}}", "container_port": 8400, "port": 8400}, {"host_ip" : "{{dockertutorial01_ip}}", "container_port": 8500, "port": 8500}], "args" : ["-server","-bootstrap-expect 3","-advertise {{dockertutorial01_ip}}","-ui-dir /ui"], "labels" : [ "dockertutorial-01" ], "restart_policy": { "name": "always" } }'
      when: "not current_container_list.content | search('consulserver-01')"

    - name: Wait for consul agent server1 to start listening
      wait_for: host="{{dockertutorial01_shipyard_ip}}" port=8300 state=started

    - name: Start gliderlabs/registrator
      uri: >
        url={{dockertutorial01_shipyard_url}}/api/containers
        method=POST
        HEADER_Content-Type="application/json"
        HEADER_X-Service-Key={{shipyard_api_key}}
        HEADER_Accept="application/json"
        status_code=201,409,500
        return_content=yes
        body='{ "name": "gliderlabs/registrator", "cpus": 0.2, "memory": 0.0, "type": "service", "hostname": "registrator", "domain": "", "container_name": "{{ansible_hostname}}-registrator", "args" : ["consul://{{dockertutorial01_ip}}:8500"], "labels" : [ "dockertutorial-01" ], "volumes": [ "/var/run/docker.sock:/tmp/docker.sock" ], "restart_policy": { "name": "always" } }'
      #TODO: container list should only show containers for this vm
      #when: "not current_container_list.content | search('registrator')"

